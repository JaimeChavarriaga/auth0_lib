/*
*  This rule been automatically generated by auth0-authz-extension
*  Updated by otroother14@yahoo.com, 2017-12-11T03:07:22.379Z
 */
/*
*  This rule been automatically generated by auth0-authz-extension
*  Updated by otroother14@yahoo.com, 2017-12-11T03:07:22.379Z
 
function (user, context, callback) {
  var _ = require('lodash');
  var EXTENSION_URL = "https://otroother14.us.webtask.io/adf6e2f2b84784b57522e3b19dfc9201";
  var audience = '';
  var ACCESS_TOKEN_URL = "https://otroother14.auth0.com/oauth/token";
  var CLIENT_ID = "6ivKAXVBdQAGd4dlL9BBOrOSFXc1Hlsn";
  var CLIENT_SECRET = "xn9aAaF929uGyHPXK7__b7YGcuKkw3ihbY0Vaz9ILPIaFV2sdD3q7iZ8G1MtfjrY";
  var GRANT_TYPE = "client_credentials";
  var AUDIENCE = "urn:auth0-authz-api";
  var USER_ROLES = user.user_metadata.roles.replace("[","").replace("]","").split(",");
  var accessToken = '';
 
  audience = audience || (context.request && context.request.query && context.request.query.audience);
  if (audience === 'urn:auth0-authz-api') {
    return callback(new UnauthorizedError('no_end_users'));
  }

  audience = audience || (context.request && context.request.body && context.request.body.audience);
  if (audience === 'urn:auth0-authz-api') {
    return callback(new UnauthorizedError('no_end_users'));
  }
  getPolicy(user, context, function(err, res, data) {
    if (err) {
      console.log('Error from Authorization Extension:', err);
      return callback(new UnauthorizedError('Authorization Extension: ' + err.message));
    }

    if (res.statusCode !== 200) {
      console.log('Error from Authorization Extension:', res.body || res.statusCode);
      return callback(
        new UnauthorizedError('Authorization Extension: ' + ((res.body && (res.body.message || res.body) || res.statusCode)))
      );
    }
    console.log(user.user_metadata.roles);
   getAccessToken();
   
  });

  // Get the policy for the user.
  function getPolicy(user, context, cb) {
   
    request.post({
      url: EXTENSION_URL + "/api/users/" + user.user_id + "/policy/" + context.clientID,
      headers: {
        "x-api-key": "dca2ad4c95215c4e9682141a126446504c62f1657cf9fa1553d41a083afa8a21"
      },
      json: {
        connectionName: context.connection || user.identities[0].connection,
        groups: user.groups
      },
      timeout: 5000
    }, cb);
   
  }
  
 function saveToMetadata(user, groups, roles, permissions, cb) {
   
    user.app_metadata = user.app_metadata || {};
    
    user.app_metadata.authorization = {
      groups: groups,
      roles: roles,
      permissions: permissions
    };

    auth0.users.updateAppMetadata(user.user_id, user.app_metadata)
    .then(function() {
      cb();
    })
    .catch(function(err){
      cb(err);
    });
  }
  function setPermissions(permissionsId,token){
      var options = {
      method : "GET",
        url: EXTENSION_URL + "/api/permissions",
        headers:{
        authorization: "Bearer " + token
        }
      };
    request(options,function(error,response,body){
    if(!error && response.statusCode === 200){
    var permissionsName = [];  
    var permissions = JSON.parse(body).permissions;
      for(var per in permissions){
      if(permissionsId.indexOf(permissions[per]._id)>-1){
      permissionsName.push(permissions[per].name);
      }
      }
      saveToMetadata(user,user.user_metadata.group,USER_ROLES, permissionsName, 
                     function(err) {
                          return callback(err, user, context);
                          });
    }
    });
  }
  function getRoles(token){
    var options = {
    method:"GET",
      url:EXTENSION_URL+"/api/roles",
      headers:{
      authorization:"Bearer " + token
      }
    };
    request(options,function(error,response,body){
      if(!error && response.statusCode === 200){
        var permissionsRoles = [];
        var roles = JSON.parse(body).roles;
      for(var rol in roles){
        if(USER_ROLES.indexOf(roles[rol].name)>-1){
          var permissions = roles[rol].permissions;
        for(var permission in permissions){
          permissionsRoles.push(permissions[permission]);
        }
        }
      }
        setPermissions(permissionsRoles,token);
      }
    });
  }
    function getAccessToken(){
      var options ={
    method:"POST",
      url:ACCESS_TOKEN_URL,
      headers:{
      "content-type": "application/json"
      },
      json:{
      "grant_type": GRANT_TYPE,
        "audience": AUDIENCE,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET
      }
    };  
    request(options,function(error,response,body){ 
    if(!error && response.statusCode === 200){
      getRoles(body.access_token);
    }});
          
  // Store authorization data in the user profile so we can query it later.
  
}}

*/